
[{
            "title": "How to create an Excel file with Python using xlwt - InDeepData",
            "excerpt": "Python's XLWT library allows you to write Excel files. In addition to text and numbers, formulas can also be entered into multiple worksheets. Other features include styling text, managing column size, and more.",
            "category": "Python",
            "date": "2022-11-27T00:00:00.000Z",
            "url": "/blog/create-excel-with-python/",
            "content": "Python's XLWT library allows you to write Excel files. In addition to text and numbers, formulas can also be entered into multiple worksheets. Other features include styling text, managing column size, and more. How to install xlwt librabry Install xlwt with the below command. pip install xlwt In order to test our code after installation, we need to create a dummy data set. data = [ { \"name\":\"Testuser1\", \"age\":20, \"country\":\"India\" }, { \"name\":\"Testuser2\", \"age\":20, \"country\":\"Canada\" }, { \"name\":\"Testuser2\", \"age\":29, \"country\":\"USA\" }, ] Copy Code Now we have the data to create excel file. How to create Excel with Python using xlwt Please follow the below given code # Import workbook to write data from xlwt from xlwt import Workbook #Create an object of the workbook excel = Workbook() #Add sheet in workbook sheet = excel.add_sheet(&quot;Test Data&quot;) for index, value in enumerate(data): sheet.write(index, 0, value[&quot;name&quot;]) sheet.write(index, 1, value[&quot;age&quot;]) sheet.write(index, 2, value[&quot;country&quot;]) #Now save the excel save_location = &quot;path/to/your/working/directory/result.xls&quot; excel.save(save_location) Copy Code Thanks for visiting InDeepData",
            "keywords": "Python, CSV, Pandas, reader"
        }
        ,{
            "title": "How to read CSV files with or without Pandas - InDeepData",
            "excerpt": "CSV Means Comma Separated Values. CSV is a simple file used to store data as a spreadsheet or database. And we can read it with or without Pandas.",
            "category": "Python",
            "date": "2022-11-27T00:00:00.000Z",
            "url": "/blog/how-to-read-csv/",
            "content": "Full form of CSV: Comma Separated Values CSV files contain lists of data separated by commas in plain text format. Basically we use CSV files to exchange and transfer data from one destination to another. And we can read it with or without Pandas. To download dataset please visit Here How to read CSV file with Pandas #Import Pandas library import pandas as pd #Import the Dataset file. Pandas has read_csv method that help to load .csv file file_path = &quot;iris.csv&quot; data = pd.read_csv(file_path) #Let's see first five datapoints data.head(5) #Output: You will get the first 5 rows of the Dataset #['sepal.length', 'sepal.width', 'petal.length', 'petal.width', 'variety'] #['5.1', '3.5', '1.4', '.2', 'Setosa'] #['4.9', '3', '1.4', '.2', 'Setosa'] #['4.7', '3.2', '1.3', '.2', 'Setosa'] #['4.6', '3.1', '1.5', '.2', 'Setosa'] #['5', '3.6', '1.4', '.2', 'Setosa'] Copy Code How to read CSV file without using the Pandas library CSV Python's built-in library can be used to read csv files without using pandas. Here we are using the reader() function to read the data from the file. # Import reader module from csv Library from csv import reader #read the CSV file def load_csv(filename): # Open file in read mode file = open(filename,&quot;r&quot;) # Reading file lines = reader(file) # Converting into a list data = list(lines) return data if name == &quot;main&quot;: # Path of the dataset file_path = &quot;iris.csv&quot; data = load_csv(file_path) # Let's print the first 5 datapoints for row in data[:6]: print(row, end = &quot;\\n&quot;) #Output: You will get the first 5 rows of the Dataset as given below. #['sepal.length', 'sepal.width', 'petal.length', 'petal.width', 'variety'] #['5.1', '3.5', '1.4', '.2', 'Setosa'] #['4.9', '3', '1.4', '.2', 'Setosa'] #['4.7', '3.2', '1.3', '.2', 'Setosa'] #['4.6', '3.1', '1.5', '.2', 'Setosa'] #['5', '3.6', '1.4', '.2', 'Setosa'] Copy Code Although load_csv() is a helpful function, it has some limitations. While reading files, it doesn't handle empty spaces/row. We can solve this problem by using a list. To solve this problem you can use the below code snippets. Let see #Load the CSV file def load_csv(filename): data = list() # Open file in read mode file = open(filename,&quot;r&quot;) # Reading file lines = reader(file) csv_reader = reader(file) for row in csv_reader: if not row: continue data.append(row) return data if name == &quot;main&quot;: # Path of the dataset filename = &quot;iris.csv&quot; data = load_csv(filename) # Let's print the first 5 datapoints for row in data[:6]: print(row, end = &quot;\\n&quot;) #['sepal.length', 'sepal.width', 'petal.length', 'petal.width', 'variety'] #['5.1', '3.5', '1.4', '.2', 'Setosa'] #['4.9', '3', '1.4', '.2', 'Setosa'] #['4.7', '3.2', '1.3', '.2', 'Setosa'] #['4.6', '3.1', '1.5', '.2', 'Setosa'] #['5', '3.6', '1.4', '.2', 'Setosa'] Copy Code Thanks ðŸ™Œ for visiting InDeepData.",
            "keywords": "Python, CSV, Pandas, reader"
        }
        ,{
            "title": "How to export DataFrame to CSV using pandas - InDeepData",
            "excerpt": "Explore: How to save/export DataFrame to CSV using pandas with python programming language. It will save your CSV file to your given location very easily.",
            "category": "Python",
            "date": "2023-07-20T00:00:00.000Z",
            "url": "/blog/export-dataframe-to-csv-with-pandas/",
            "content": "It is well known that Pandas is a popular library for manipulating and analyzing data. Additionally, it is widely used in Python and is open-source. Most of the time, we find that the data is enormous when we begin analyzing it. Once we analyzed the data, we discovered some columns were not necessary or sometimes we needed to preprocess it. It could be anything. Once the data has been refined, we want to save it locally so we can use it in the future without having to repeat the entire process. Pandas have a method .to_csv() for storing data into CSV files which are exported and saved locally. The following code demonstrates how it works. import pandas as pd #Create a simple data frame data = { 'Name': ['John', 'Mary', 'James', 'Linda', 'Robert'], 'Age': [28, 23, 31, 19, 36], 'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix'] } df = pd.DataFrame(data) #Write the dataframe object into a CSV file df.to_csv(&quot;/path/to/your/csvfile.csv&quot;, index=False, sep=',', encoding='utf-8') print(&quot;File Created Successfully&quot;) Copy Code Parameters used in .to_csv() functions. ðŸ‘‰ The first parameter specifies the name of the CSV file (in my case, it's &quot;csvfile.csv&quot;). You would need to specify the full path if the file is not in the same directory as your script. ðŸ‘‰ index=False means that we will not write row names (index). If you want to include the index, you can set index=True or remove this parameter because its default value is True. ðŸ‘‰ sep=',' defines the delimiter to use. In this case, we use a comma. ðŸ‘‰ encoding='utf-8' specifies the encoding to be used for the file. This is optional, and if not specified, it will default to 'utf-8'. This script will create the csvfile.csv file in the same directory after it is run. You can create the file in another directory by replacing csvfile.csv with the full path. An example would be: import pandas as pd #Create a simple data frame data = { 'Name': ['John', 'Mary', 'James', 'Linda', 'Robert'], 'Age': [28, 23, 31, 19, 36], 'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix'] } df = pd.DataFrame(data) #Write the data frame object into a CSV file df.to_csv(&quot;/path/to/your/csvfile.csv&quot;, index=False, sep=',', encoding='utf-8') print(&quot;File Created Successfully&quot;) Copy Code Make sure you replace /path/to/your/csvfile.csv with your actual CSV file path. Hopefully ðŸ™Œ this blog helps you. Frequently Asked Questions(FAQs) In the CSV file, how can I make sure that special characters are exported properly? DataFrames with special characters can easily be exported to CSV files using to_csv()'s encoding parameter. Pandas will correctly handle Unicode characters in your data if you specify encoding='utf-8'. You can use DataFrame.to_csv('my_file.csv', encoding='utf-8') to manage these characters properly. Is there a way to include or exclude the DataFrame's index when exporting to CSV? CSV files generated by the to_csv() function include the DataFrame's index by default. Pass index=False as an argument to the function if you want to exclude it. An example would be DataFrame.to_csv(filename, index=False). As an alternative, you can use this argument or set index=True to include the index. What is the function name in pandas to export a DataFrame to a CSV file? A DataFrame can be exported to a CSV file using the to_csv() function in pandas. DataFrame.to_csv(filename) is the basic syntax, where 'filename' is the name of the CSV file to generate.",
            "keywords": "Python, CSV, Pandas, dataframe"
        }
        ,{
            "title": "How to read Excel file in Python without using Pandas - InDeepData",
            "excerpt": "Learn how to read Excel file in Python programming language without using Pandas library. We can read Excel file with other python libraries like openpyxl and xlrd. Boost your Python skills by learning these new techniques.",
            "category": "Python",
            "date": "2023-09-17T00:00:00.000Z",
            "url": "/blog/how-to-read-excel-in-python-without-pandas/",
            "content": "Reading of an Excel files with extensions(.xls, .xlsx) can be done without using Pandas in Python programming. Instead of using Pandas we can use other alternative libraries like xlrd, openpyxl. In this article we will see how we can read Excel file in Python by using xlrd library. Related Article: How to create Excel file with xlwt How to Install xlrd librabry First of all we have to install xlrd in our local environment. And xlrd can be installed using pip (Python package manager). Use the given command to install it. pip install xlrd Read Excel with xlrd Method open_workbook will opens up the given Excel file so that we can read that file. import xlrd #Open the Excel file workbook = xlrd.open_workbook('test.xls') # Replace 'your_excel_file.xls' with your file path #Select the sheet you want to read (by index) sheet = workbook.sheet_by_index(0) #Iterate through rows and columns to access data for row in range(sheet.nrows): for col in range(sheet.ncols): cell_value = sheet.cell_value(row, col) print(cell_value, end='\\t') print() # Move to the next row #Close the Excel file (not required for reading, but good practice) workbook.release_resources() Copy Code To read a perticular sheet in the Whole Excel file we can select sheets by sheet_by_index method. Note: nrows and ncols will measure and tell how many rows and coulmns we have in a sheet. Hopefully you are able to read Excel files with xlrd. Frequently Asked Questions(FAQs) Can I use these libraries to write data to Excel files as well? No, Both openpyxl and xlrd are primarily build &amp; used to only read. To write data to Excel files, you may need to explore other libraries or techniques. What are the advantages of using libraries like openpyxl or xlrd over Pandas? Libraries like openpyxl and xlrd are lighter, more efficient, and better suited for specific Excel file reading tasks.",
            "keywords": "Python, CSV, Pandas, reader"
        }
        ]